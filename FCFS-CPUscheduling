#include <stdio.h>
#define MAX 30

int main() {
    int n, bt[MAX], at[MAX], wt[MAX], tat[MAX], temp[MAX];
    int ttat = 0, twt = 0, i;
    float awt, atat;
    
    printf("Enter the Number of Processes:\n");
    scanf("%d", &n);
    
    printf("Enter the Burst Time of Processes:\n");
    for (i = 0; i < n; i++) {
        printf("Burst Time of Process-%d: ", i + 1);
        scanf("%d", &bt[i]);
    }
    
    printf("Enter the Arrival Time of Processes:\n");
    for (i = 0; i < n; i++) {
        printf("Arrival Time of Process-%d: ", i + 1);
        scanf("%d", &at[i]);
    }
    
    printf("\nPR\tBT\tAT\tWT\tTAT\n");
    
    // Initialize the start time of the first process
    temp[0] = 0;
    
    for (i = 0; i < n; i++) {
        // Set the waiting and turnaround times to zero initially
        wt[i] = 0;
        tat[i] = 0;
        
        // Calculate the completion time of each process
        if (i == 0) {
            temp[i] = at[i]; // First process starts at its arrival time
        } else {
            // Ensure the next process starts after the last one completes
            temp[i] = temp[i - 1] + bt[i - 1];
        }
        
        // Waiting time is the difference between start time and arrival time
        wt[i] = temp[i] - at[i];
        
        // If waiting time is negative (arrives after previous process completes), set it to zero
        if (wt[i] < 0) {
            wt[i] = 0;
            temp[i] = at[i]; // Process starts as it arrives if idle time exists
        }
        
        // Turnaround time is waiting time + burst time
        tat[i] = wt[i] + bt[i];
        
        // Update total waiting time and turnaround time
        twt += wt[i];
        ttat += tat[i];
        
        printf("\n%d\t%d\t%d\t%d\t%d\n", i + 1, bt[i], at[i], wt[i], tat[i]);
    }
    
    // Calculate average waiting time and average turnaround time
    awt = (float)twt / n;
    atat = (float)ttat / n;
    
    printf("Average Waiting Time: %f\n", awt);
    printf("Average TurnAround Time: %f\n", atat);
    
    return 0;
}
